<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>计算机知识 on ShangguanHong</title>
    <link>https://shangguanhong.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/</link>
    <description>Recent content in 计算机知识 on ShangguanHong</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 05 Mar 2020 19:35:38 +0000</lastBuildDate>
    
	<atom:link href="https://shangguanhong.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9F%A5%E8%AF%86/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>理解OAuth2</title>
      <link>https://shangguanhong.github.io/2020/03/05/%E7%90%86%E8%A7%A3oauth2/</link>
      <pubDate>Thu, 05 Mar 2020 19:35:38 +0000</pubDate>
      
      <guid>https://shangguanhong.github.io/2020/03/05/%E7%90%86%E8%A7%A3oauth2/</guid>
      <description>原文地址：理解OAuth 2.0 OAuth是一个关于授权（authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是2.0版。</description>
    </item>
    
    <item>
      <title>了解JSON Web Token(JWT)</title>
      <link>https://shangguanhong.github.io/2019/08/08/%E4%BA%86%E8%A7%A3json-web-token-jwt/</link>
      <pubDate>Thu, 08 Aug 2019 22:04:06 +0000</pubDate>
      
      <guid>https://shangguanhong.github.io/2019/08/08/%E4%BA%86%E8%A7%A3json-web-token-jwt/</guid>
      <description>&lt;h1 id=&#34;1-前言&#34;&gt;1. 前言&lt;/h1&gt;
&lt;p&gt;互联网服务离不开用户认证，一般流程是下面这样。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、用户向服务器发送用户名和密码。&lt;/p&gt;
&lt;p&gt;2、服务器验证通过后，在当前对话（session）里面保存相关数据，比如用户角色、登录时间等等。&lt;/p&gt;
&lt;p&gt;3、服务器向用户返回一个 session_id，写入用户的 Cookie。&lt;/p&gt;
&lt;p&gt;4、用户随后的每一次请求，都会通过 Cookie，将 session_id 传回服务器。&lt;/p&gt;
&lt;p&gt;5、服务器收到 session_id，找到前期保存的数据，由此得知用户的身份。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这种模式的问题在于，扩展性（scaling）不好。单机当然没有问题，如果是服务器集群，或者是跨域的服务导向架构，就要求 session 数据共享，每台服务器都能够读取 session。&lt;/p&gt;
&lt;p&gt;举例来说，A 网站和 B 网站是同一家公司的关联服务。现在要求，用户只要在其中一个网站登录，再访问另一个网站就会自动登录，请问怎么实现？&lt;/p&gt;
&lt;p&gt;一种解决方案是 session 数据持久化，写入数据库或别的持久层。各种服务收到请求后，都向持久层请求数据。这种方案的优点是架构清晰，缺点是工程量比较大。另外，持久层万一挂了，就会单点失败。&lt;/p&gt;
&lt;p&gt;另一种方案是服务器索性不保存 session 数据了，所有数据都保存在客户端，每次请求都发回服务器。JWT 就是这种方案的一个代表。&lt;/p&gt;
&lt;p&gt;下面介绍 JWT 的使用。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>